name: 05-SonarQube-Analysis

on:
  pull_request:
    branches:
      - main
      - master
      - develop
      - "release/**"
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branches to run the workflow on'
        required: true
        default: 'main'
      sonar-branch:
        description: 'Sonar project branch name.'
        required: false
        default: 'default'
env:
  GIT_BRANCH: ""
  SONAR_BRANCH: ""

jobs:
  sonarqube:
    runs-on: self-hosted
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      BRANCH_NAME: ${{ github.event.pull_request.head.ref || github.head_ref || github.ref_name }}

    steps:
      - name: Process branch names
        if: always()
        run: |
          echo "Determining GIT_BRANCH..."
          # Explanation:Fallback branch name determination
          # 1. priority to the input branch if provided
          # 2. if not provided, use the pull request head ref
          # 3. if not a pull request, use the head ref of the current branch
          # 4. finally, use the ref name of the current branch
          GIT_BRANCH="${{ github.event.inputs.branch || github.event.pull_request.head.ref || github.head_ref || github.ref_name }}"
          if [ "${{ github.event.inputs.sonar-branch }}" != "default" ]; then
            SONAR_BRANCH="${{ github.event.inputs.sonar-branch }}"
          else
            SONAR_BRANCH="$GIT_BRANCH"
          fi
          echo "GIT_BRANCH=$GIT_BRANCH" >> $GITHUB_ENV
          echo "SONAR_BRANCH=$SONAR_BRANCH" >> $GITHUB_ENV
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ env.GIT_BRANCH }}
          submodules: true
          fetch-depth: 0

      - name: Build Docker Image
        run: docker build -t ${{ github.event.repository.name }}-build-env:latest .

      - name: Create SonarQube cache directory
        run: |
          echo "Creating SonarQube cache directory if not exists..."
          sudo mkdir -p /var/cache/sonar
          sudo chmod -R 775 /var/cache/sonar
          sudo chown -R $(id -u):$(id -g) /var/cache/sonar
          echo "SonarQube cache directory created at /var/cache/sonar with Docker access granted."
      - name: Run SonarQube analysis
        env:
          SONAR_ANALYSIS_PARAM_LIST_PR: |
            -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.projectBaseDir=/home/${{ github.event.repository.name }}/ \
            -Dproject.settings=/home/${{ github.event.repository.name }}/.github/sonar-project.properties \
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }} \
            -Dsonar.pullrequest.branch=${{ github.head_ref }} \
            -Dsonar.pullrequest.base=${{ github.base_ref }}
          SONAR_ANALYSIS_PARAM_LIST_PUSH: |
            -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.projectBaseDir=/home/${{ github.event.repository.name }}/ \
            -Dproject.settings=/home/${{ github.event.repository.name }}/.github/sonar-project.properties \
            -Dsonar.branch.name=${{ env.SONAR_BRANCH }}
        #######################################################################
        #TODO update the build-wrapper commands to match your project structure
        #######################################################################
        run: |
          if [ "${{ github.event_name }}" != "pull_request" ]; then
          echo "Running SonarQube analysis for push event"
          docker run -u root --rm \
            -v /var/cache/sonar:/root/.sonar/cache:rw \
            -v $(pwd):/home/${{ github.event.repository.name }}/:rw \
            -w /home/${{ github.event.repository.name }}/ \
            ${{ github.event.repository.name }}-build-env:latest /bin/bash -c " { \
            mkdir -p sonar-bw \
            && /opt/build-wrapper-linux-x86/build-wrapper-linux-x86-64 --out-dir sonar-bw/VARIANT1/ make VARIANT1 \
            && /opt/build-wrapper-linux-x86/build-wrapper-linux-x86-64 --out-dir sonar-bw/VARIANT2/ make VARIANT2 \
            && /opt/build-wrapper-linux-x86/build-wrapper-linux-x86-64 --out-dir sonar-bw/VARIANT3/ make VARIANT3 \
            && sonar-scanner ${SONAR_ANALYSIS_PARAM_LIST_PUSH} \
            } | tee sonar.log"
          else
          echo "Running SonarQube analysis for pull request #${{ github.event.pull_request.number }}"
          docker run -u root --rm \
            -v /var/cache/sonar:/root/.sonar/cache:rw \
            -v $(pwd):/home/${{ github.event.repository.name }}/:rw \
            -w /home/${{ github.event.repository.name }}/ \
            ${{ github.event.repository.name }}-build-env:latest /bin/bash -c " { \
            mkdir -p sonar-bw \
            && /opt/build-wrapper-linux-x86/build-wrapper-linux-x86-64 --out-dir sonar-bw/VARIANT1/ make VARIANT1 \
            && /opt/build-wrapper-linux-x86/build-wrapper-linux-x86-64 --out-dir sonar-bw/VARIANT2/ make VARIANT2 \
            && /opt/build-wrapper-linux-x86/build-wrapper-linux-x86-64 --out-dir sonar-bw/VARIANT3/ make VARIANT3 \
            && sonar-scanner ${SONAR_ANALYSIS_PARAM_LIST_PR} \
            } | tee sonar.log"
          fi
          CE_TASK_ID=$(grep -oP 'id=\K[0-9a-f\-]{36}' sonar.log)
          if [ -z "$CE_TASK_ID" ]; then
            echo "Failed to extract ceTaskId from scanner output."
            cat sonar.log
            exit 1
          fi
          echo "Extracted CE_TASK_ID: $CE_TASK_ID exporting as GITHUB_ENV"
          echo "CE_TASK_ID=$CE_TASK_ID" >> $GITHUB_ENV

      - name: Evaluate SonarQube Quality Gate
        run: |
          echo "Waiting for SonarQube analysis task ($CE_TASK_ID) to complete..."
          STATUS=""
          for i in $(seq 1 10); do
            sleep 10
            STATUS_JSON=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: "${{ secrets.SONAR_HOST_URL }}/api/ce/task?id=$CE_TASK_ID")
            echo "STATUS_JSON: $STATUS_JSON"
            STATUS=$(echo "$STATUS_JSON" | jq -r '.task.status')
            if [ "$STATUS" == "SUCCESS" ]; then
              break
            elif [ "$STATUS" == "FAILED" ]; then
              echo "SonarQube task failed."
              exit 1
            fi
          done

          ANALYSIS_ID=$(echo $STATUS_JSON | jq -r '.task.analysisId')
          if [ "$STATUS" != "SUCCESS" ]; then
            echo "SonarQube analysis did not complete successfully in time."
            exit 1
          fi

          QG_STATUS_JSON=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?analysisId=$ANALYSIS_ID")
          QG_STATUS=$(echo $QG_STATUS_JSON | jq -r '.projectStatus.status')
          echo "Quality Gate Status: $QG_STATUS"

          if [ "$QG_STATUS" != "OK" ]; then
            echo "Quality Gate failed: $QG_STATUS"
            exit 1
          fi

      - name: Clean up Docker & workspace
        if: always()
        run: |
          echo "Cleaning Git workspace"
          docker run -u root --rm \
            -v /var/cache/sonar:/root/.sonar/cache \
            -v $(pwd):/home/${{ github.event.repository.name }}/ \
            -w /home/${{ github.event.repository.name }}/ \
            ${{ github.event.repository.name }}-build-env:latest /bin/bash -c " \
            git config --global --add safe.directory /home/${{ github.event.repository.name }} \
            && git clean -ffdx \
            && rm -rf sonar-bw \
            && rm -f sonar.log"
          echo "Cleanup complete"
